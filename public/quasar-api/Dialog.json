{
  "type": "plugin",
  "meta": {
    "docsUrl": "https://v2.quasar.dev/quasar-plugins/dialog"
  },
  "injection": "$q.dialog",
  "methods": {
    "create": {
      "desc": "Creates an ad-hoc Dialog; Same as calling $q.dialog(...)",
      "params": {
        "opts": {
          "type": "Object",
          "required": true,
          "definition": {
            "class": {
              "type": [
                "String",
                "Array",
                "Object"
              ],
              "tsType": "VueClassProp",
              "desc": "CSS Class name to apply to the Dialog's QCard",
              "examples": [
                "my-class"
              ],
              "desc_cn": "应用于对话框 QCard 的 CSS 类名"
            },
            "style": {
              "type": [
                "String",
                "Array",
                "Object"
              ],
              "tsType": "VueStyleProp",
              "desc": "CSS style to apply to the Dialog's QCard",
              "examples": [
                "border: 2px solid black"
              ],
              "desc_cn": "应用于对话框 QCard 的 CSS 类名"
            },
            "title": {
              "type": "String",
              "desc": "A text for the heading title of the dialog",
              "examples": [
                "Continue?"
              ],
              "desc_cn": "对话框标题的文本"
            },
            "message": {
              "type": "String",
              "desc": "A text with more information about what needs to be input, selected or confirmed.",
              "examples": [
                "Are you certain you want to continue?"
              ],
              "desc_cn": "一段带有更多信息（有关需要输入、选择或确认什么）的文本。"
            },
            "html": {
              "type": "Boolean",
              "desc": "Render title and message as HTML; This can lead to XSS attacks, so make sure that you sanitize the message first",
              "desc_cn": "以 HTML 格式呈现标题和消息；这可能会导致 XSS 攻击，因此请确保先对消息进行安全处理"
            },
            "position": {
              "type": "String",
              "desc": "Position of the Dialog on screen. Standard is centered.",
              "values": [
                "top",
                "right",
                "bottom",
                "left",
                "standard"
              ],
              "default": "standard",
              "required": false,
              "desc_cn": "对话框在屏幕上的位置。standard 是居中的。"
            },
            "prompt": {
              "type": "Object",
              "tsType": "QDialogInputPrompt",
              "desc": "An object definition of the input field for the prompting question.",
              "examples": [
                "prompt: { model: this.promptVal, type: 'number' }"
              ],
              "definition": {
                "model": {
                  "type": "String",
                  "required": true,
                  "desc": "The initial value of the input",
                  "desc_cn": "输入的初始值"
                },
                "type": {
                  "type": "String",
                  "desc": "Optional property to determine the input field type",
                  "default": "text",
                  "examples": [
                    "text",
                    "number",
                    "textarea"
                  ],
                  "required": false,
                  "desc_cn": "用于确定输入字段类型的可选属性"
                },
                "isValid": {
                  "type": "Function",
                  "desc": "Is typed content valid?",
                  "params": {
                    "val": {
                      "type": "String",
                      "required": true,
                      "desc": "The value of the input",
                      "desc_cn": "输入的值"
                    }
                  },
                  "returns": {
                    "type": "Boolean",
                    "desc": "The text passed validation or not",
                    "desc_cn": "文本是否通过验证"
                  },
                  "desc_cn": "键入的内容是否有效"
                },
                "...QInputProps": {
                  "type": "Any",
                  "desc": "Any QInput props, like color, label, stackLabel, filled, outlined, rounded, prefix etc",
                  "examples": [
                    "label: 'My Label'",
                    "standout: true",
                    "counter: true",
                    "maxlength: 12"
                  ]
                },
                "...nativeAttributes": {
                  "type": "Object",
                  "desc": "Any native attributes to pass to the prompt control",
                  "examples": [
                    "autocomplete: 'off'"
                  ]
                }
              },
              "desc_cn": "提示问题的输入字段的对象定义。"
            },
            "options": {
              "type": "Object",
              "tsType": "QDialogSelectionPrompt",
              "desc": "An object definition for creating the selection form content",
              "examples": [
                "{ model: this.dialogSelection, type: 'radio', items: [...listOfItems] }"
              ],
              "definition": {
                "model": {
                  "type": [
                    "String",
                    "Array"
                  ],
                  "required": true,
                  "desc": "The value of the selection (String if it's of type radio or Array otherwise)",
                  "examples": [
                    "[]"
                  ],
                  "desc_cn": "选择的值（如果是 radio 则为 String 类型，否则为 Array 类型）"
                },
                "type": {
                  "type": "String",
                  "desc": "The type of selection",
                  "default": "radio",
                  "values": [
                    "radio",
                    "checkbox",
                    "toggle"
                  ],
                  "required": false,
                  "desc_cn": "选择的类型"
                },
                "items": {
                  "type": "Array",
                  "desc": "The list of options to interact with; Equivalent to options prop of the QOptionGroup component",
                  "examples": [
                    "[ { label: 'Option 1', value: 'op1' }, { label: 'Option 2', value: 'op2' }, { label: 'Option 3', value: 'op3' } ]"
                  ]
                },
                "isValid": {
                  "type": "Function",
                  "desc": "Is the model valid?",
                  "params": {
                    "model": {
                      "type": [
                        "String",
                        "Array"
                      ],
                      "required": true,
                      "desc": "The current model (String if it's of type radio or Array otherwise)",
                      "examples": [
                        "opt2",
                        "[ 'opt1' ]",
                        "[]",
                        "[ 'opt1', 'opt3' ]"
                      ],
                      "desc_cn": "当前模型 model（如果是 radio 则为 String 类型，否则为 Array 类型）"
                    }
                  },
                  "returns": {
                    "type": "Boolean",
                    "desc": "The selection passed validation or not",
                    "desc_cn": "选择是否通过验证"
                  },
                  "desc_cn": "模型（model）是否有效吗"
                },
                "...QOptionGroupProps": {
                  "type": "Any",
                  "desc": "Any QOptionGroup props",
                  "desc_cn": "可以是任何 QOptionGroup 的属性",
                  "examples": [
                    "color: 'deep-purple-4'",
                    "inline: true",
                    "dense: true",
                    "leftLabel: true"
                  ]
                },
                "...nativeAttributes": {
                  "type": "Object",
                  "desc": "Any native attributes to pass to the inner QOptionGroup",
                  "desc_cn": "传递给内部 QOptionGroup 的原生属性"
                }
              },
              "desc_cn": "用于创建选择表单内容的对象定义"
            },
            "progress": {
              "type": [
                "Boolean",
                "Object"
              ],
              "desc": "Display a Quasar spinner (if value is true, then the defaults are used); Useful for conveying the idea that something is happening behind the covers; Tip: use along with persistent, ok: false and update() method",
              "definition": {
                "spinner": {
                  "type": "Component",
                  "desc": "One of the QSpinners",
                  "desc_cn": "QSpinners 中的一个"
                },
                "color": {
                  "type": "String",
                  "desc": "Color name for component from the Quasar Color Palette",
                  "examples": [
                    "primary",
                    "teal-10"
                  ],
                  "category": "style",
                  "desc_cn": "组件的颜色，来自 Quasar 调色板"
                }
              },
              "desc_cn": "显示 Quasar 旋转加载器（如果值为 true，则使用默认值）；有助于传达某些事情在幕后发生的想法；提示：与 persistent、ok:false 和 update() 方法搭配使用"
            },
            "ok": {
              "type": [
                "String",
                "Object",
                "Boolean"
              ],
              "desc": "Props for an 'OK' button",
              "definition": {
                "...props": {
                  "type": "Any",
                  "desc": "See QBtn for available props",
                  "desc_cn": "有关可用的属性，请参见 QBtn"
                }
              },
              "desc_cn": "'OK' 按钮的属性"
            },
            "cancel": {
              "type": [
                "String",
                "Object",
                "Boolean"
              ],
              "desc": "Props for a 'CANCEL' button",
              "definition": {
                "...props": {
                  "type": "Any",
                  "desc": "See QBtn for available props",
                  "desc_cn": "有关可用的属性，请参见 QBtn"
                }
              },
              "desc_cn": "取消按钮的属性"
            },
            "focus": {
              "type": "String",
              "desc": "What button to focus, unless you also have 'prompt' or 'options'",
              "values": [
                "ok",
                "cancel",
                "none"
              ],
              "default": "ok",
              "required": false,
              "desc_cn": "要聚焦的按钮，除非您还有 'prompt' 或 'options'"
            },
            "stackButtons": {
              "type": "Boolean",
              "desc": "Makes buttons be stacked instead of vertically aligned",
              "desc_cn": "使按钮堆叠而不是垂直对齐"
            },
            "color": {
              "type": "String",
              "desc": "Color name for component from the Quasar Color Palette",
              "examples": [
                "primary",
                "teal-10"
              ],
              "category": "style",
              "desc_cn": "组件的颜色，来自 Quasar 调色板"
            },
            "dark": {
              "type": "Boolean",
              "desc": "Apply dark mode",
              "category": "style",
              "desc_cn": "应用深色模式"
            },
            "persistent": {
              "type": "Boolean",
              "desc": "User cannot dismiss Dialog if clicking outside of it or hitting ESC key; Also, an app route change won't dismiss it",
              "desc_cn": "如果开启，则用户在底部对话框外单击或按 ESC 键，无法关闭对话框。此外，应用程序路由更改也不会关闭它"
            },
            "noEscDismiss": {
              "type": "Boolean",
              "desc": "User cannot dismiss Dialog by hitting ESC key; No need to set it if 'persistent' prop is also set",
              "desc_cn": "用户不能按 ESC 键关闭对话框；如果还设置了 'persistent' 属性，则无需设置它"
            },
            "noBackdropDismiss": {
              "type": "Boolean",
              "desc": "User cannot dismiss Dialog by clicking outside of it; No need to set it if 'persistent' prop is also set",
              "desc_cn": "用户不能通过单击对话框外部来关闭对话框；如果还设置了 'persistent' 属性，则无需设置它"
            },
            "noRouteDismiss": {
              "type": "Boolean",
              "desc": "Changing route app won't dismiss Dialog; No need to set it if 'persistent' prop is also set",
              "desc_cn": "更改路由应用程序不会关闭对话框；如果还设置了 'persistent' 属性，则无需设置它"
            },
            "seamless": {
              "type": "Boolean",
              "desc": "Put Dialog into seamless mode; Does not use a backdrop so user is able to interact with the rest of the page too",
              "desc_cn": "使对话进入无边框模式；不使用背景，因此用户也可以与页面的其他部分进行交互"
            },
            "maximized": {
              "type": "Boolean",
              "desc": "Put Dialog into maximized mode",
              "desc_cn": "将对话框置于最大化模式"
            },
            "fullWidth": {
              "type": "Boolean",
              "desc": "Dialog will try to render with same width as the window",
              "desc_cn": "对话框将尝试以与窗口相同的宽度进行渲染"
            },
            "fullHeight": {
              "type": "Boolean",
              "desc": "Dialog will try to render with same height as the window",
              "desc_cn": "对话框将尝试以与窗口相同的高度渲染"
            },
            "transitionShow": {
              "type": "String",
              "desc": "One of Quasar's embedded transitions",
              "examples": [
                "fade",
                "slide-down"
              ],
              "category": "transition",
              "default": "scale",
              "required": false,
              "desc_cn": "Quasar 内置的过渡动画之一"
            },
            "transitionHide": {
              "type": "String",
              "desc": "One of Quasar's embedded transitions",
              "examples": [
                "fade",
                "slide-down"
              ],
              "category": "transition",
              "default": "scale",
              "required": false,
              "desc_cn": "Quasar 内置的过渡动画之一"
            },
            "component": {
              "type": [
                "Component",
                "String"
              ],
              "desc": "Use custom dialog component; use along with 'componentProps' prop where possible",
              "desc_cn" : "使用自定义的对话框组件；尽可能与 'componentProps' 属性一起使用",
              "examples": [
                "CustomComponent",
                "'custom-component'"
              ]
            },
            "componentProps": {
              "type": "Object",
              "desc": "User defined props which will be forwarded to underlying custom component if 'component' prop is used",
              "desc_cn":"用户自定义属性，如果使用了 'component' 属性，则将其转发到自定义对话框组件"
            }
          },
          "desc": "Dialog options",
          "tsType": "QDialogOptions",
          "autoDefineTsType": true,
          "desc_cn": "对话框选项"
        }
      },
      "returns": {
        "type": "Object",
        "desc": "Chainable Object",
        "tsType": "DialogChainObject",
        "autoDefineTsType": true,
        "definition": {
          "onOk": {
            "type": "Function",
            "required": true,
            "desc": "Receives a Function param to tell what to do when OK is pressed / option is selected",
            "params": {
              "callbackFn": {
                "type": "Function",
                "desc": "Tell what to do",
                "required": true,
                "params": {
                  "payload": {
                    "type": "Any",
                    "desc": "The payload if called onDialogOK with the parameter or emitted one with the 'ok' event",
                    "desc_cn": "调用 onDialogOK 或者 'ok' 事件被触发时带有的参数负载",
                    "required": false,
                    "examples": [
                      "'Quasar Framework'",
                      "[ 1, 2, 6, 3 ]",
                      "{ book: { id: 1, name: 'Lorem Ipsum' }, user: { name: 'Lorem J. Ipsum', role: 'admin' } }"
                    ]
                  }
                },
                "returns": null,
                "examples": [
                  "() => console.log('OK!')",
                  "(payload) => Notify.create({ type: 'positive', message: `Successfully saved '${payload.book.name}' book!` })"
                ],
                "desc_cn": "回调函数"
              }
            },
            "returns": {
              "type": "Object",
              "desc": "Chained Object",
              "tsType": "DialogChainObject",
              "desc_cn": "链式对象"
            },
            "desc_cn": "接收一个函数作为参数，在按下 OK/选择选项时回会被调用的回调函数"
          },
          "onCancel": {
            "type": "Function",
            "required": true,
            "desc": "Receives a Function as param to tell what to do when Cancel is pressed / dialog is dismissed",
            "params": {
              "callbackFn": {
                "type": "Function",
                "desc": "Tell what to do",
                "required": true,
                "params": null,
                "returns": null,
                "desc_cn": "回调函数"
              }
            },
            "returns": {
              "type": "Object",
              "desc": "Chained Object",
              "tsType": "DialogChainObject",
              "desc_cn": "链式对象"
            },
            "desc_cn": "接收一个函数作为参数，在按下 Cancel/取消对话框时回会被调用的回调函数"
          },
          "onDismiss": {
            "type": "Function",
            "required": true,
            "desc": "Receives a Function param to tell what to do when the dialog is closed",
            "params": {
              "callbackFn": {
                "type": "Function",
                "desc": "Tell what to do",
                "required": true,
                "params": null,
                "returns": null,
                "desc_cn": "回调函数"
              }
            },
            "returns": {
              "type": "Object",
              "desc": "Chained Object",
              "tsType": "DialogChainObject",
              "desc_cn": "链式对象"
            },
            "desc_cn": "接收一个函数作为参数，关闭对话框时会被调用的回调函数"
          },
          "hide": {
            "type": "Function",
            "required": true,
            "desc": "Hides the dialog when called",
            "params": null,
            "returns": {
              "type": "Object",
              "desc": "Chained Object",
              "tsType": "DialogChainObject",
              "desc_cn": "链式对象"
            },
            "desc_cn": "调用时隐藏对话框"
          },
          "update": {
            "type": "Function",
            "required": true,
            "desc": "Updates the initial properties (given as create() param) except for 'component'",
            "params": {
              "opts": {
                "type": "Object",
                "required": true,
                "desc": "Props (except 'component') which will overwrite the initial create() params; If create() was invoked with a custom dialog component then this param should contain the new componentProps"
              }
            },
            "returns": {
              "type": "Object",
              "desc": "Chained Object",
              "tsType": "DialogChainObject",
              "desc_cn": "链式对象"
            }
          }
        },
        "desc_cn": "可链接对象"
      },
      "tsInjectionPoint": true,
      "desc_cn": "创建一个定制的对话框；与调用 $q.dialog(...) 效果相同"
    }
  }
}