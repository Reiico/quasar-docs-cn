{
  "type": "component",
  "meta": {
    "docsUrl": "https://v2.quasar.dev/vue-components/menu"
  },
  "props": {
    "transition-show": {
      "type": "String",
      "desc": "One of Quasar's embedded transitions",
      "desc_cn": "Quasar 内置的过渡效果之一",
      "examples": [
        "fade",
        "slide-down"
      ],
      "category": "transition",
      "default": "fade",
      "required": false,
      "desc_cn": "Quasar的嵌入式过渡动画之一"
    },
    "transition-hide": {
      "type": "String",
      "desc": "One of Quasar's embedded transitions",
      "desc_cn": "Quasar 内置的过渡效果之一",
      "examples": [
        "fade",
        "slide-down"
      ],
      "category": "transition",
      "default": "fade",
      "required": false,
      "desc_cn": "Quasar的嵌入式过渡动画之一"
    },
    "transition-duration": {
      "type": [
        "String",
        "Number"
      ],
      "desc": "Transition duration (in milliseconds, without unit)",
      "default": 300,
      "category": "transition",
      "required": false
    },
    "target": {
      "type": [
        "Boolean",
        "String",
        "Element"
      ],
      "desc": "Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) or a DOM element it attaches the events to the specified DOM element (if it exists)",
      "default": true,
      "values": [
        "(Boolean) true",
        "(Boolean) false",
        "(CSS selector)",
        "(DOM Element)"
      ],
      "examples": [
        ":target=\"false\"",
        ":target=\"$refs.target\"",
        "target=\".my-parent\"",
        "target=\"#target-id\""
      ],
      "category": "behavior",
      "required": false,
      "desc_cn": "配置目标元素以触发组件切换；'“true”表示启用父DOM元素，“false”表示禁用将事件附加到任何DOM元素；通过使用字符串（CSS选择器）或DOM元素，它将事件附加到指定的DOM元素（如果存在）"
    },
    "no-parent-event": {
      "type": "Boolean",
      "desc": "Skips attaching events to the target DOM element (that trigger the element to get shown)",
      "category": "behavior",
      "desc_cn": "跳过将事件附加到目标DOM元素（触发元素显示）"
    },
    "context-menu": {
      "type": "Boolean",
      "desc": "Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)",
      "category": "behavior",
      "desc_cn": "允许组件的行为类似于上下文菜单，通过鼠标右键单击（或在移动设备上长按）打开"
    },
    "model-value": {
      "type": "Boolean",
      "desc": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive",
      "category": "model"
    },
    "dark": {
      "type": "Boolean",
      "desc": "Notify the component that the background is a dark color",
      "category": "style",
      "desc_cn": "设置组件背景为深色"
    },
    "fit": {
      "type": "Boolean",
      "desc": "Allows the menu to match at least the full width of its target",
      "category": "position",
      "desc_cn": "允许菜单至少匹配其目标的全部宽度"
    },
    "cover": {
      "type": "Boolean",
      "desc": "Allows the menu to cover its target. When used, the 'self' and 'fit' props are no longer effective",
      "category": "position",
      "desc_cn": "允许菜单覆盖其目标。使用时，“self”和“fit”属性不再有效"
    },
    "anchor": {
      "type": "String",
      "desc": "Two values setting the starting position or anchor point of the menu relative to its target",
      "values": [
        "top left",
        "top middle",
        "top right",
        "top start",
        "top end",
        "center left",
        "center middle",
        "center right",
        "center start",
        "center end",
        "bottom left",
        "bottom middle",
        "bottom right",
        "bottom start",
        "bottom end"
      ],
      "category": "position",
      "desc_cn": "设置菜单相对于其目标的起始位置或定位点的两个值"
    },
    "self": {
      "type": "String",
      "desc": "Two values setting the menu's own position relative to its target",
      "values": [
        "top left",
        "top middle",
        "top right",
        "top start",
        "top end",
        "center left",
        "center middle",
        "center right",
        "center start",
        "center end",
        "bottom left",
        "bottom middle",
        "bottom right",
        "bottom start",
        "bottom end"
      ],
      "category": "position",
      "desc_cn": "两个值设置菜单自身相对于目标的位置"
    },
    "offset": {
      "type": "Array",
      "desc": "An array of two numbers to offset the menu horizontally and vertically in pixels",
      "examples": [
        "[8, 8]",
        "[5, 10]"
      ],
      "category": "position",
      "desc_cn": "以像素为单位水平和垂直偏移菜单的两个数字的数组"
    },
    "scroll-target": {
      "type": [
        "Element",
        "String"
      ],
      "desc": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one",
      "examples": [
        ":scroll-target=\"$refs.scrollTarget\"",
        "scroll-target=\".scroll-target-class\"",
        "scroll-target=\"#scroll-target-id\"",
        "scroll-target=\"body\""
      ],
      "category": "behavior",
      "desc_cn": "CSS选择器或DOM元素用作自定义滚动容器，而不是自动检测到的滚动容器"
    },
    "touch-position": {
      "type": "Boolean",
      "desc": "Allows for the target position to be set by the mouse position, when the target of the menu is either clicked or touched",
      "category": "behavior",
      "desc_cn": "当单击或触摸菜单的目标时，允许通过鼠标位置设置目标位置"
    },
    "persistent": {
      "type": "Boolean",
      "desc": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key",
      "category": "behavior",
      "desc_cn": "允许在菜单外单击/轻触或按ESC键时不关闭菜单"
    },
    "no-route-dismiss": {
      "type": "Boolean",
      "desc": "Changing route app won't dismiss the popup; No need to set it if 'persistent' prop is also set",
      "category": "behavior",
      "desc_cn": "更改路由应用程序不会关闭弹出窗口；如果还设置了“persistent”属性，则无需设置它"
    },
    "auto-close": {
      "type": "Boolean",
      "desc": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap",
      "category": "behavior",
      "desc_cn": "允许在菜单中单击/轻触以关闭它；有用，而不是将事件附加到应在单击/点击时关闭菜单的每个菜单项"
    },
    "separate-close-popup": {
      "type": "Boolean",
      "desc": "Separate from parent menu, marking it as a separate closing point for v-close-popup (without this, chained menus close all together)",
      "category": "behavior",
      "desc_cn": "与父菜单分离，将其标记为v-close-popup的单独关闭点（没有此项，链接菜单将全部关闭）"
    },
    "square": {
      "type": "Boolean",
      "desc": "Forces content to have squared borders",
      "category": "style",
      "desc_cn": "强制内容具有方形边框"
    },
    "no-refocus": {
      "type": "Boolean",
      "desc": "(Accessibility) When Menu gets hidden, do not refocus on the DOM element that previously had focus",
      "category": "behavior",
      "desc_cn": "（可访问性）当菜单被隐藏时，不要重新关注以前有焦点的DOM元素"
    },
    "no-focus": {
      "type": "Boolean",
      "desc": "(Accessibility) When Menu gets shown, do not switch focus on it",
      "category": "behavior",
      "desc_cn": "（辅助功能）显示菜单时，不要将焦点切换到菜单上"
    },
    "max-height": {
      "type": "String",
      "desc": "The maximum height of the menu; Size in CSS units, including unit name",
      "examples": [
        "16px",
        "2rem"
      ],
      "category": "style",
      "desc_cn": "菜单的最大高度；带有 CSS 单位的尺寸大小，包括单位的名称"
    },
    "max-width": {
      "type": "String",
      "desc": "The maximum width of the menu; Size in CSS units, including unit name",
      "examples": [
        "16px",
        "2rem"
      ],
      "category": "style",
      "desc_cn": "菜单的最大宽度；带有 CSS 单位的尺寸大小，包括单位的名称"
    }
  },
  "slots": {
    "default": {
      "desc": "Default slot in the devland unslotted content of the component",
      "desc_cn": "组件的devland unslotted内容中的默认插槽"
    }
  },
  "events": {
    "update:model-value": {
      "desc": "Emitted when showing/hidden state changes; Is also used by v-model",
      "params": {
        "value": {
          "type": "Boolean",
          "desc": "New state (showing/hidden)"
        }
      }
    },
    "show": {
      "desc": "Emitted after component has triggered show()",
      "params": {
        "evt": {
          "type": "Event",
          "desc": "JS event object",
          "required": true,
          "desc_cn": "JS事件对象"
        }
      },
      "desc_cn": "在组件触发show()后发出"
    },
    "before-show": {
      "desc": "Emitted when component triggers show() but before it finishes doing it",
      "params": {
        "evt": {
          "type": "Event",
          "desc": "JS event object",
          "required": true,
          "desc_cn": "JS事件对象"
        }
      },
      "desc_cn": "在组件触发show()但在完成之前发出"
    },
    "hide": {
      "desc": "Emitted after component has triggered hide()",
      "params": {
        "evt": {
          "type": "Event",
          "desc": "JS event object",
          "required": true,
          "desc_cn": "JS事件对象"
        }
      },
      "desc_cn": "在组件触发hide()后发出"
    },
    "before-hide": {
      "desc": "Emitted when component triggers hide() but before it finishes doing it",
      "params": {
        "evt": {
          "type": "Event",
          "desc": "JS event object",
          "required": true,
          "desc_cn": "JS事件对象"
        }
      },
      "desc_cn": "在组件触发hide()但在完成之前发出"
    },
    "escape-key": {
      "desc": "Emitted when ESC key is pressed; Does not get emitted if Menu is 'persistent'",
      "desc_cn": "按ESC键时发出；如果菜单是“持久(persistent)的”，则不会发出"
    }
  },
  "methods": {
    "show": {
      "desc": "Triggers component to show",
      "params": {
        "evt": {
          "type": "Event",
          "desc": "JS event object",
          "required": false,
          "desc_cn": "JS事件对象"
        }
      },
      "desc_cn": "触发要显示的组件"
    },
    "hide": {
      "desc": "Triggers component to hide",
      "params": {
        "evt": {
          "type": "Event",
          "desc": "JS event object",
          "required": false,
          "desc_cn": "JS事件对象"
        }
      },
      "desc_cn": "触发要隐藏的组件"
    },
    "toggle": {
      "params": {
        "evt": {
          "type": "Event",
          "desc": "JS event object",
          "required": false,
          "desc_cn": "JS事件对象"
        }
      },
      "desc": "Triggers component to toggle between show/hide",
      "desc_cn": "触发组件在显示/隐藏之间切换"
    },
    "updatePosition": {
      "desc": "There are some custom scenarios for which Quasar cannot automatically reposition the menu without significant performance drawbacks so the optimal solution is for you to call this method when you need it",
      "desc_cn": "有一些自定义的场景，Quasar无法没有明显的性能缺陷地自动重新定位菜单，因此最佳解决方案是在需要时调用此方法"
    },
    "focus": {
      "desc": "Focus menu; if you have content with autofocus attribute, it will directly focus it",
      "desc_cn": "聚焦菜单；如果内容具有自动聚焦属性，它将直接对其进行聚焦"
    }
  },
  "computedProps": {
    "contentEl": {
      "type": "Element",
      "desc": "The DOM Element of the rendered content",
      "addedIn": "v2.10.1"
    }
  }
}