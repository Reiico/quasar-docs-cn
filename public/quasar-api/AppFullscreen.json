{
  "type": "plugin",
  "meta": {
    "docsUrl": "https://v2.quasar.dev/quasar-plugins/app-fullscreen"
  },
  "injection": "$q.fullscreen",
  "props": {
    "isCapable": {
      "type": "Boolean",
      "desc": "Does browser support it?",
      "desc_cn": "浏览器是否支持"
    },
    "isActive": {
      "type": "Boolean",
      "desc": "Is Fullscreen active?",
      "desc_cn": "全屏状态是否激活"
    },
    "activeEl": {
      "type": [
        "Element",
        "null"
      ],
      "desc": "The DOM element used as root for fullscreen, otherwise 'null'",
      "examples": [
        "document.fullscreenElement",
        "null"
      ],
      "desc_cn": "全屏显示的根 DOM 元素，或者为 'null'"
    }
  },
  "methods": {
    "request": {
      "desc": "Request going into Fullscreen (with optional target)",
      "params": {
        "target": {
          "type": "Element",
          "desc": "Optional Element of target to request Fullscreen on",
          "examples": [
            "document.getElementById('example')"
          ],
          "desc_cn": "可选的，请求全屏显示的目标元素"
        }
      },
      "returns": {
        "type": "Promise<void>",
        "desc": "A Promise which is resolved when transitioned to fullscreen mode. It gets rejected with 'Not capable' if the browser is not capable, and with an Error object if something else went wrong.",
        "examples": [
          "request().then(response => { ... }).catch(err => { ... })"
        ],
        "desc_cn": "成功进入全屏模式时返回一个 resolved 状态的 Promise，如果浏览器不能进入全屏模式则会返回一个带 'Not capable' 信息的 rejected 状态的 Promise，如果发生了错误，则返回一个带有 Error 对象的 rejected 状态的 Promise"
      },
      "desc_cn": "请求进入全屏（可选择指定的目标元素）"
    },
    "exit": {
      "desc": "Request exiting out of Fullscreen mode",
      "returns": {
        "type": "Promise<void>",
        "desc": "A Promise which is resolved when exited out of fullscreen mode. It gets rejected with 'Not capable' if the browser is not capable, and with an Error object if something else went wrong.",
        "examples": [
          "exit().then(response => { ... }).catch(err => { ... })"
        ],
        "desc_cn": "成功退出全屏模式时返回一个 resolved 状态的 Promise，如果浏览器不能退出全屏模式则会返回一个带 'Not capable' 信息的 rejected 状态的 Promise，如果发生了错误，则返回一个带有 Error 对象的 rejected 状态的 Promise"
      },
      "desc_cn": "请求退出全屏模式"
    },
    "toggle": {
      "desc": "Request toggling Fullscreen mode (with optional target if requesting going into Fullscreen only)",
      "params": {
        "target": {
          "type": "Element",
          "desc": "Optional Element of target to request Fullscreen on",
          "examples": [
            "document.getElementById('example')"
          ],
          "desc_cn": "请求全屏显示时可选目标元素"
        }
      },
      "returns": {
        "type": "Promise<void>",
        "desc": "A Promise which is resolved when transitioned to / exited out of fullscreen mode. It gets rejected with 'Not capable' if the browser is not capable, and with an Error object if something else went wrong.",
        "examples": [
          "toggle().then(response => { ... }).catch(err => { ... })"
        ],
        "desc_cn": "成功切换全屏模式时返回一个 resolved 状态的 Promise，如果浏览器不能切换全屏模式则会返回一个带 'Not capable' 信息的 rejected 状态的 Promise，如果发生了错误，则返回一个带有 Error 对象的 rejected 状态的 Promise"
      },
      "desc_cn": "请求切换全屏模式（如果仅请求进入全屏模式，则可选目标元素）"
    }
  }
}